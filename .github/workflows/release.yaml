name: Create Release for Rust Project

on:
  push:
    tags:
      - "v*"

jobs:
  build_and_archive:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Extract Binary Name from Cargo.toml
        id: get_name
        # 'cargo pkgid' gibt die eindeutige Paket-ID aus (z.B. file:///path#my-crate@0.1.0)
        # Mit 'cut' extrahieren wir daraus sauber den Namen.
        # Das Ergebnis wird in die GITHUB_ENV geschrieben, damit es in späteren Schritten verfügbar ist.
        run: echo "BINARY_NAME=$(cargo pkgid | cut -d'#' -f2 | cut -d'@' -f1)" >> $GITHUB_ENV

      - name: Build binary
        run: cargo build --release --bin ${{ env.BINARY_NAME }}

      - name: Create Archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # GEÄNDERT: Verwendet jetzt die ausgelesene Variable
          $ARCHIVE_NAME = "${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows-x86_64.zip"
          Compress-Archive -Path "target/release/${{ env.BINARY_NAME }}.exe" -DestinationPath $ARCHIVE_NAME

      - name: Create Archive (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # GEÄNDERT: Verwendet jetzt die ausgelesene Variable
          OS_NAME=$(if [ "${{ runner.os }}" == "macOS" ]; then echo "macos"; else echo "linux"; fi)
          ARCHIVE_NAME="${{ env.BINARY_NAME }}-${{ github.ref_name }}-${OS_NAME}-x86_64.tar.gz"
          tar -czvf $ARCHIVE_NAME -C target/release ${{ env.BINARY_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: archives-${{ matrix.os }}
          path: |
            *.zip
            *.tar.gz

  create_release:
    name: Create GitHub Release
    needs: [build_and_archive]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.zip, artifacts/**/*.tar.gz
