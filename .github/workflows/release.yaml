name: Create Release for Rust Project

on:
  push:
    tags:
      - "v*"

jobs:
  # Dieser Job baut die Binaries und packt sie in Archive
  build_and_archive:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build binary
        # WICHTIG: Ersetze 'dein_binary_name' durch den Namen deiner Binary aus Cargo.toml
        run: cargo build --release --bin dein_binary_name

      - name: Create Archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $BINARY_NAME = "dein_binary_name" # <-- HIER AUCH ERSETZEN
          $ARCHIVE_NAME = "${BINARY_NAME}-${{ github.ref_name }}-windows-x86_64.zip"
          Compress-Archive -Path "target/release/$BINARY_NAME.exe" -DestinationPath $ARCHIVE_NAME

      - name: Create Archive (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          BINARY_NAME="dein_binary_name" # <-- HIER AUCH ERSETZEN
          OS_NAME=$(if [ "${{ runner.os }}" == "macOS" ]; then echo "macos"; else echo "linux"; fi)
          ARCHIVE_NAME="${BINARY_NAME}-${{ github.ref_name }}-${OS_NAME}-x86_64.tar.gz"
          tar -czvf $ARCHIVE_NAME -C target/release $BINARY_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: archives-${{ matrix.os }}
          path: |
            *.zip
            *.tar.gz

  # Dieser Job erstellt das finale GitHub-Release
  create_release:
    name: Create GitHub Release
    needs: [build_and_archive] # Wartet, bis alle Builds fertig sind
    runs-on: ubuntu-latest
    permissions:
      contents: write # Nötig, um ein Release zu erstellen

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Lädt alle Artefakte in einen Ordner 'artifacts'

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          # Sucht nach allen Archiven in den heruntergeladenen Artefakt-Ordnern
          files: artifacts/**/*.zip, artifacts/**/*.tar.gz
