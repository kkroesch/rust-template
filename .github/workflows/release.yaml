name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  BIN_NAME: mycli         # <-- setze hier deinen Binary-Namen
  RUST_TOOLCHAIN: stable
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            pack: tar
            strip_cmd: "strip"
          - os: macos-latest
            target: x86_64-apple-darwin
            pack: tar
            strip_cmd: "strip"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            pack: zip
            strip_cmd: ""  # no strip on Windows

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain & target
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.target }}

      - name: Cache cargo registry and target dir
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: |
          set -euo pipefail
          TARGET=${{ matrix.target }}
          cargo build --release --target "$TARGET"

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME:-dev}"
          BIN="${{ env.BIN_NAME }}"
          TGT="${{ matrix.target }}"
          OUT="dist"
          mkdir -p "$OUT"
          EXT=""
          if [[ "$TGT" == *"windows"* ]]; then EXT=".exe"; fi
          BIN_PATH="target/${TGT}/release/${BIN}${EXT}"
          test -f "$BIN_PATH" || { echo "Binary not found: $BIN_PATH"; ls -la target/${TGT}/release || exit 1; }
          PKG="${BIN}-${VERSION}-${TGT}"
          mkdir -p "${PKG}"
          cp "$BIN_PATH" "${PKG}/"
          # include a small README with usage/OS info (optional)
          echo "Built from ${GITHUB_SHA}" > "${PKG}/BUILD_INFO.txt"
          if [[ "${{ matrix.pack }}" == "tar" ]]; then
            tar -czf "${OUT}/${PKG}.tar.gz" "${PKG}"
          else
            python - <<PY
import shutil, os
shutil.make_archive("${OUT}/${PKG}", 'zip', "${PKG}")
PY
          fi
          rm -rf "${PKG}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ matrix.target }}
          path: dist/*

      - name: Attach to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
